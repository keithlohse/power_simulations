head(test_distribution)
test_exp_distribution <- test_distribution %>% as_tibble() %>%
mutate(group = "test", method="explicit") %>%
rename(pre_test=V1, low_pressure=V2, high_pressure=V3)
# Using the aov() function versus the lmer() function ----
# Below, I fit the model using the lmer() function,
# but you could build a similar model using aov(), t.test(), lm(), etc.
# I will use lmer() for it's flexibility across designs, but you could
# replace this with whatever analysis best matches your method.
test_anl_sample <- sample_n(test_anl_distribution, size=10)
test_exp_sample <- sample_n(test_exp_distribution, size=10)
teach_anl_sample <- sample_n(teach_anl_distribution, size=10)
teach_exp_sample <- sample_n(teach_exp_distribution, size=10)
dat <- rbind(test_anl_sample, test_exp_sample,
teach_anl_sample, teach_exp_sample)
dat_long <- dat %>% rownames_to_column(var="subID") %>%
pivot_longer(cols = low_pressure:high_pressure,
names_to = "test", values_to = "score")
head(dat_long)
options(contrasts=c("contr.sum","contr.poly"))
mod0 <- lmer(score~pre_test+group*method*test+(1|subID), data=dat_long, REML=TRUE)
Anova(mod0, type="III")
anova(mod0)
anova(mod0)[[6]][1] # covariate p-value
anova(mod0)[[6]][2] # group p-value
anova(mod0)[[6]][3] # method p-value
anova(mod0)[[6]][4] # test p-value
anova(mod0)[[6]][5] # GxM p-value
anova(mod0)[[6]][6] # GxT p-value
anova(mod0)[[6]][7] # MxT p-value
anova(mod0)[[6]][8] # GxMxT p-value
dat_long %>% pivot_wider(names_from = "test", values_from = "score") %>%
mutate(diff = high_pressure-low_pressure) %>%
group_by(group, method) %>%
summarize(pre_ave=mean(pre_test),
pre_sd=sd(pre_test),
low_ave=mean(low_pressure),
low_sd=sd(low_pressure),
high_ave=mean(high_pressure),
high_sd=sd(high_pressure),
diff_ave = mean(diff),
diff_sd = sd(diff)) %>%
pivot_wider(values_from=pre_ave:diff_sd, names_from = c(group, method),
names_sep = "_")
# Re-sampling to Estimate Statistical Power ----
ns = c(seq(from=30, to=100, by=10)) # sample sizes for the simulations
k = 200 # number of iterations at each sample size
sim_data <- data.frame(matrix(NA, nrow = length(ns)*k,
ncol = 10))
sim_data <- sim_data %>% rename(n=X1,
iter=X2,
Cov_p=X3,
Group_p=X4,
Method_p=X5,
Test_p=X6,
GxM_p=X7,
GxT_p=X8,
MxT_p=X9,
GxMxT_p=X10
)
row = 0
set.seed(1)
for (n in ns) {
print(n)
for (i in 1:k) {
row = row + 1
print(row)
test_anl_sample <- sample_n(test_anl_distribution, size=n)
test_exp_sample <- sample_n(test_exp_distribution, size=n)
teach_anl_sample <- sample_n(teach_anl_distribution, size=n)
teach_exp_sample <- sample_n(teach_exp_distribution, size=n)
dat <- rbind(test_anl_sample, test_exp_sample, teach_anl_sample, teach_exp_sample)
dat_long <- dat %>% rownames_to_column(var="subID") %>%
pivot_longer(cols = low_pressure:high_pressure,
names_to = "test", values_to = "score")
options(contrasts=c("contr.sum","contr.poly"))
mod0 <- lmer(score~pre_test+group*method*test+(1|subID), data=dat_long, REML=TRUE)
sim_data[row, "n"] <- n
sim_data[row, "iter"] <- i
sim_data[row, "Cov_p"] <- anova(mod0)[[6]][1] # covariate p-value
sim_data[row, "Group_p"] <- anova(mod0)[[6]][2] # group p-value
sim_data[row, "Method_p"] <- anova(mod0)[[6]][3] # method p-value
sim_data[row, "Test_p"] <- anova(mod0)[[6]][4] # test p-value
sim_data[row, "GxM_p"] <- anova(mod0)[[6]][5] # GxM  p-value
sim_data[row, "GxT_p"] <- anova(mod0)[[6]][6] # GxT p-value
sim_data[row, "MxT_p"] <- anova(mod0)[[6]][7] # MxT p-value
sim_data[row, "GxMxT_p"] <- anova(mod0)[[6]][8] # GxMxT p-value
}
}
head(sim_data)
sim_summary <- sim_data %>% group_by(n) %>%
summarize(Cov_sig = sum(Cov_p<0.05)/n(),
Group_sig = sum(Group_p<0.05)/n(),
Method_sig = sum(Method_p<0.05)/n(),
Test_sig = sum(Test_p<0.05)/n(),
GxM_sig = sum(GxM_p<0.05)/n(),
GxT_sig = sum(GxT_p<0.05)/n(),
MxT_sig = sum(MxT_p<0.05)/n(),
GxMxT_sig = sum(GxMxT_p<0.05)/n()) %>%
pivot_longer(cols=Cov_sig:GxMxT_sig, names_to = "Effect", values_to = "Power") %>%
mutate(Effect = fct_relevel(Effect,
"Cov_sig", "Group_sig", "Method_sig",
"Test_sig", "GxM_sig", "GxT_sig",
"MxT_sig", "GxMxT_sig"))
# Color blind friendly palette
cbPalette <- c("#000000", "#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(data=sim_summary, aes(x=n, y=Power)) +
geom_line(aes(lty=Effect, col=Effect)) +
geom_point(aes(shape=Effect, col=Effect)) +
scale_x_continuous(name = "n/Group") +
scale_y_continuous(name = "Statistical Power", limits=c(0,1),
breaks=c(seq(from=0, to=1, by=0.2))) +
theme_bw()+facet_wrap(~Effect, ncol=2)+
scale_fill_manual(values=cbPalette)+
scale_colour_manual(values=cbPalette)+
theme(axis.text=element_text(size=12, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
getwd()
ggsave(
filename="./power_sim_1.jpeg",
plot = last_plot(),
width = 6,
height = 8,
units = "in",
dpi = 150
)
setwd("~/GitHub/power_simulations")
library(MASS); library(lme4); library(car); library(lmerTest); library(tidyverse)
# Expecting to Teach ANALOGY Group ----
set.seed(1)
teach_size <- 1000 # size of the simulated population
teach_meanvector <- c(87, 54, 46) # means for pre and post tests
teach_correl_matrix <- matrix(c(1, 0.6, 0.6,
0.6, 1, 0.8,
0.6, 0.8, 1), # values for the sample correlation matrix
ncol = 3)
teach_sds <- c(37, 19, 14) # between subject SDs on each test
D <- diag(teach_sds)
teach_covariance_matrix <- D%*%teach_correl_matrix%*%D
teach_distribution <- mvrnorm(n = teach_size,
mu = teach_meanvector,
Sigma = teach_covariance_matrix)
head(teach_distribution)
teach_anl_distribution <- teach_distribution %>% as_tibble() %>%
mutate(group = "teach", method="analogy") %>%
rename(pre_test=V1, low_pressure=V2, high_pressure=V3)
View(teach_anl_distribution)
# Expecting to Teach EXPLICIT Group ----
set.seed(1)
teach_size <- 1000 # size of the simulated population
teach_meanvector <- c(81, 47, 65) # means for pre and post tests
teach_correl_matrix <- matrix(c(1, 0.6, 0.6,
0.6, 1, 0.8,
0.6, 0.8, 1), # values for the sample correlation matrix
ncol = 3)
teach_sds <- c(25, 13, 18) # between subject SDs on each test
D <- diag(teach_sds)
teach_covariance_matrix <- D%*%teach_correl_matrix%*%D
teach_distribution <- mvrnorm(n = teach_size,
mu = teach_meanvector,
Sigma = teach_covariance_matrix)
head(teach_distribution)
teach_exp_distribution <- teach_distribution %>% as_tibble() %>%
mutate(group = "teach", method="explicit") %>%
rename(pre_test=V1, low_pressure=V2, high_pressure=V3)
# Expecting to Test ANALOGY Group ----
set.seed(1)
test_size <- 1000 # size of the simulated population
test_meanvector <- c(97, 58, 56) # means for and post tests
test_correl_matrix <- matrix(c(1, 0.6, 0.6,
0.6, 1, 0.8,
0.6, 0.8, 1), # values for the sample correlation matrix
ncol = 3)
test_sds <- c(40, 20, 16) # between subject SDs on each test
D <- diag(test_sds)
test_covariance_matrix <- D%*%test_correl_matrix%*%D
test_distribution <- mvrnorm(n = test_size,
mu = test_meanvector,
Sigma = test_covariance_matrix)
head(test_distribution)
test_anl_distribution <- test_distribution %>% as_tibble() %>%
mutate(group = "test", method="analogy") %>%
rename(pre_test=V1, low_pressure=V2, high_pressure=V3)
# Expecting to Test EXPLICIT Group ----
set.seed(1)
test_size <- 1000 # size of the simulated population
test_meanvector <- c(87, 61, 64) # means for and post tests
test_correl_matrix <- matrix(c(1, 0.6, 0.6,
0.6, 1, 0.8,
0.6, 0.8, 1), # values for the sample correlation matrix
ncol = 3)
test_sds <- c(28, 26, 27) # between subject SDs on each test
D <- diag(test_sds)
test_covariance_matrix <- D%*%test_correl_matrix%*%D
test_distribution <- mvrnorm(n = test_size,
mu = test_meanvector,
Sigma = test_covariance_matrix)
head(test_distribution)
test_exp_distribution <- test_distribution %>% as_tibble() %>%
mutate(group = "test", method="explicit") %>%
rename(pre_test=V1, low_pressure=V2, high_pressure=V3)
# Using the aov() function versus the lmer() function ----
# Below, I fit the model using the lmer() function,
# but you could build a similar model using aov(), t.test(), lm(), etc.
# I will use lmer() for it's flexibility across designs, but you could
# replace this with whatever analysis best matches your method.
test_anl_sample <- sample_n(test_anl_distribution, size=10)
test_exp_sample <- sample_n(test_exp_distribution, size=10)
teach_anl_sample <- sample_n(teach_anl_distribution, size=10)
teach_exp_sample <- sample_n(teach_exp_distribution, size=10)
dat <- rbind(test_anl_sample, test_exp_sample,
teach_anl_sample, teach_exp_sample)
dat_long <- dat %>% rownames_to_column(var="subID") %>%
pivot_longer(cols = low_pressure:high_pressure,
names_to = "test", values_to = "score")
head(dat_long)
options(contrasts=c("contr.sum","contr.poly"))
mod0 <- lmer(score~pre_test+group*method*test+(1|subID), data=dat_long, REML=TRUE)
Anova(mod0, type="III")
anova(mod0)
anova(mod0)[[6]][1] # covariate p-value
anova(mod0)[[6]][2] # group p-value
anova(mod0)[[6]][3] # method p-value
anova(mod0)[[6]][4] # test p-value
anova(mod0)[[6]][5] # GxM p-value
anova(mod0)[[6]][6] # GxT p-value
anova(mod0)[[6]][7] # MxT p-value
anova(mod0)[[6]][8] # GxMxT p-value
dat_long %>% pivot_wider(names_from = "test", values_from = "score") %>%
mutate(diff = high_pressure-low_pressure) %>%
group_by(group, method) %>%
summarize(pre_ave=mean(pre_test),
pre_sd=sd(pre_test),
low_ave=mean(low_pressure),
low_sd=sd(low_pressure),
high_ave=mean(high_pressure),
high_sd=sd(high_pressure),
diff_ave = mean(diff),
diff_sd = sd(diff)) %>%
pivot_wider(values_from=pre_ave:diff_sd, names_from = c(group, method),
names_sep = "_")
dat_long
# Re-sampling to Estimate Statistical Power ----
ns = c(seq(from=30, to=100, by=10)) # sample sizes for the simulations
sim_data <- data.frame(matrix(NA, nrow = length(ns)*k,
ncol = 10))
sim_data <- sim_data %>% rename(n=X1,
iter=X2,
Cov_p=X3,
Group_p=X4,
Method_p=X5,
Test_p=X6,
GxM_p=X7,
GxT_p=X8,
MxT_p=X9,
GxMxT_p=X10
)
sim_data <- data.frame(matrix(NA, nrow = length(ns)*k,
ncol = 10))
# Re-sampling to Estimate Statistical Power ----
ns = c(seq(from=30, to=100, by=10)) # sample sizes for the simulations
k = 200 # number of iterations at each sample size
sim_data <- data.frame(matrix(NA, nrow = length(ns)*k,
ncol = 10))
sim_data <- sim_data %>% rename(n=X1,
iter=X2,
Cov_p=X3,
Group_p=X4,
Method_p=X5,
Test_p=X6,
GxM_p=X7,
GxT_p=X8,
MxT_p=X9,
GxMxT_p=X10
)
row = 0
set.seed(1)
for (n in ns) {
print(n)
for (i in 1:k) {
row = row + 1
print(row)
test_anl_sample <- sample_n(test_anl_distribution, size=n)
test_exp_sample <- sample_n(test_exp_distribution, size=n)
teach_anl_sample <- sample_n(teach_anl_distribution, size=n)
teach_exp_sample <- sample_n(teach_exp_distribution, size=n)
dat <- rbind(test_anl_sample, test_exp_sample, teach_anl_sample, teach_exp_sample)
dat_long <- dat %>% rownames_to_column(var="subID") %>%
pivot_longer(cols = low_pressure:high_pressure,
names_to = "test", values_to = "score")
options(contrasts=c("contr.sum","contr.poly"))
mod0 <- lmer(score~pre_test+group*method*test+(1|subID), data=dat_long, REML=TRUE)
sim_data[row, "n"] <- n
sim_data[row, "iter"] <- i
sim_data[row, "Cov_p"] <- anova(mod0)[[6]][1] # covariate p-value
sim_data[row, "Group_p"] <- anova(mod0)[[6]][2] # group p-value
sim_data[row, "Method_p"] <- anova(mod0)[[6]][3] # method p-value
sim_data[row, "Test_p"] <- anova(mod0)[[6]][4] # test p-value
sim_data[row, "GxM_p"] <- anova(mod0)[[6]][5] # GxM  p-value
sim_data[row, "GxT_p"] <- anova(mod0)[[6]][6] # GxT p-value
sim_data[row, "MxT_p"] <- anova(mod0)[[6]][7] # MxT p-value
sim_data[row, "GxMxT_p"] <- anova(mod0)[[6]][8] # GxMxT p-value
}
}
head(sim_data)
sim_summary <- sim_data %>% group_by(n) %>%
summarize(Cov_sig = sum(Cov_p<0.05)/n(),
Group_sig = sum(Group_p<0.05)/n(),
Method_sig = sum(Method_p<0.05)/n(),
Test_sig = sum(Test_p<0.05)/n(),
GxM_sig = sum(GxM_p<0.05)/n(),
GxT_sig = sum(GxT_p<0.05)/n(),
MxT_sig = sum(MxT_p<0.05)/n(),
GxMxT_sig = sum(GxMxT_p<0.05)/n()) %>%
pivot_longer(cols=Cov_sig:GxMxT_sig, names_to = "Effect", values_to = "Power") %>%
mutate(Effect = fct_relevel(Effect,
"Cov_sig", "Group_sig", "Method_sig",
"Test_sig", "GxM_sig", "GxT_sig",
"MxT_sig", "GxMxT_sig"))
# Color blind friendly palette
cbPalette <- c("#000000", "#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
View(sim_summary)
ggplot(data=sim_summary, aes(x=n, y=Power)) +
geom_line(aes(lty=Effect, col=Effect)) +
geom_point(aes(shape=Effect, col=Effect)) +
scale_x_continuous(name = "n/Group") +
scale_y_continuous(name = "Statistical Power", limits=c(0,1),
breaks=c(seq(from=0, to=1, by=0.2))) +
theme_bw()+facet_wrap(~Effect, ncol=2)+
scale_fill_manual(values=cbPalette)+
scale_colour_manual(values=cbPalette)+
theme(axis.text=element_text(size=12, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
ggsave(
filename="./power_sim_1.jpeg",
plot = last_plot(),
width = 6,
height = 8,
units = "in",
dpi = 150
)
# Expecting to Teach ANALOGY Group ----
set.seed(1)
teach_size <- 1000 # size of the simulated population
teach_meanvector <- c(87, 54, 54) # means for pre and post tests
teach_correl_matrix <- matrix(c(1, 0.6, 0.6,
0.6, 1, 0.8,
0.6, 0.8, 1), # values for the sample correlation matrix
ncol = 3)
teach_sds <- c(37, 19, 14) # between subject SDs on each test
D <- diag(teach_sds)
teach_covariance_matrix <- D%*%teach_correl_matrix%*%D
teach_distribution <- mvrnorm(n = teach_size,
mu = teach_meanvector,
Sigma = teach_covariance_matrix)
head(teach_distribution)
teach_anl_distribution <- teach_distribution %>% as_tibble() %>%
mutate(group = "teach", method="analogy") %>%
rename(pre_test=V1, low_pressure=V2, high_pressure=V3)
# Expecting to Teach EXPLICIT Group ----
set.seed(1)
teach_size <- 1000 # size of the simulated population
teach_meanvector <- c(81, 54, 60) # means for pre and post tests
teach_correl_matrix <- matrix(c(1, 0.6, 0.6,
0.6, 1, 0.8,
0.6, 0.8, 1), # values for the sample correlation matrix
ncol = 3)
teach_sds <- c(25, 13, 18) # between subject SDs on each test
D <- diag(teach_sds)
teach_covariance_matrix <- D%*%teach_correl_matrix%*%D
teach_distribution <- mvrnorm(n = teach_size,
mu = teach_meanvector,
Sigma = teach_covariance_matrix)
head(teach_distribution)
teach_exp_distribution <- teach_distribution %>% as_tibble() %>%
mutate(group = "teach", method="explicit") %>%
rename(pre_test=V1, low_pressure=V2, high_pressure=V3)
# Expecting to Test ANALOGY Group ----
set.seed(1)
test_size <- 1000 # size of the simulated population
test_meanvector <- c(97, 58, 56) # means for and post tests
test_correl_matrix <- matrix(c(1, 0.6, 0.6,
0.6, 1, 0.8,
0.6, 0.8, 1), # values for the sample correlation matrix
ncol = 3)
test_sds <- c(40, 20, 16) # between subject SDs on each test
D <- diag(test_sds)
test_covariance_matrix <- D%*%test_correl_matrix%*%D
test_distribution <- mvrnorm(n = test_size,
mu = test_meanvector,
Sigma = test_covariance_matrix)
head(test_distribution)
test_anl_distribution <- test_distribution %>% as_tibble() %>%
mutate(group = "test", method="analogy") %>%
rename(pre_test=V1, low_pressure=V2, high_pressure=V3)
# Expecting to Test EXPLICIT Group ----
set.seed(1)
test_size <- 1000 # size of the simulated population
test_meanvector <- c(87, 61, 64) # means for and post tests
test_correl_matrix <- matrix(c(1, 0.6, 0.6,
0.6, 1, 0.8,
0.6, 0.8, 1), # values for the sample correlation matrix
ncol = 3)
test_sds <- c(28, 26, 27) # between subject SDs on each test
D <- diag(test_sds)
test_covariance_matrix <- D%*%test_correl_matrix%*%D
test_distribution <- mvrnorm(n = test_size,
mu = test_meanvector,
Sigma = test_covariance_matrix)
head(test_distribution)
test_exp_distribution <- test_distribution %>% as_tibble() %>%
mutate(group = "test", method="explicit") %>%
rename(pre_test=V1, low_pressure=V2, high_pressure=V3)
# Re-sampling to Estimate Statistical Power ----
ns = c(seq(from=30, to=100, by=10)) # sample sizes for the simulations
k = 200 # number of iterations at each sample size
sim_data <- data.frame(matrix(NA, nrow = length(ns)*k,
ncol = 10))
sim_data <- sim_data %>% rename(n=X1,
iter=X2,
Cov_p=X3,
Group_p=X4,
Method_p=X5,
Test_p=X6,
GxM_p=X7,
GxT_p=X8,
MxT_p=X9,
GxMxT_p=X10
)
row = 0
set.seed(1)
for (n in ns) {
print(n)
for (i in 1:k) {
row = row + 1
print(row)
test_anl_sample <- sample_n(test_anl_distribution, size=n)
test_exp_sample <- sample_n(test_exp_distribution, size=n)
teach_anl_sample <- sample_n(teach_anl_distribution, size=n)
teach_exp_sample <- sample_n(teach_exp_distribution, size=n)
dat <- rbind(test_anl_sample, test_exp_sample, teach_anl_sample, teach_exp_sample)
dat_long <- dat %>% rownames_to_column(var="subID") %>%
pivot_longer(cols = low_pressure:high_pressure,
names_to = "test", values_to = "score")
options(contrasts=c("contr.sum","contr.poly"))
mod0 <- lmer(score~pre_test+group*method*test+(1|subID), data=dat_long, REML=TRUE)
sim_data[row, "n"] <- n
sim_data[row, "iter"] <- i
sim_data[row, "Cov_p"] <- anova(mod0)[[6]][1] # covariate p-value
sim_data[row, "Group_p"] <- anova(mod0)[[6]][2] # group p-value
sim_data[row, "Method_p"] <- anova(mod0)[[6]][3] # method p-value
sim_data[row, "Test_p"] <- anova(mod0)[[6]][4] # test p-value
sim_data[row, "GxM_p"] <- anova(mod0)[[6]][5] # GxM  p-value
sim_data[row, "GxT_p"] <- anova(mod0)[[6]][6] # GxT p-value
sim_data[row, "MxT_p"] <- anova(mod0)[[6]][7] # MxT p-value
sim_data[row, "GxMxT_p"] <- anova(mod0)[[6]][8] # GxMxT p-value
}
}
head(sim_data)
sim_summary <- sim_data %>% group_by(n) %>%
summarize(Cov_sig = sum(Cov_p<0.05)/n(),
Group_sig = sum(Group_p<0.05)/n(),
Method_sig = sum(Method_p<0.05)/n(),
Test_sig = sum(Test_p<0.05)/n(),
GxM_sig = sum(GxM_p<0.05)/n(),
GxT_sig = sum(GxT_p<0.05)/n(),
MxT_sig = sum(MxT_p<0.05)/n(),
GxMxT_sig = sum(GxMxT_p<0.05)/n()) %>%
pivot_longer(cols=Cov_sig:GxMxT_sig, names_to = "Effect", values_to = "Power") %>%
mutate(Effect = fct_relevel(Effect,
"Cov_sig", "Group_sig", "Method_sig",
"Test_sig", "GxM_sig", "GxT_sig",
"MxT_sig", "GxMxT_sig"))
# Color blind friendly palette
cbPalette <- c("#000000", "#56B4E9", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(data=sim_summary, aes(x=n, y=Power)) +
geom_line(aes(lty=Effect, col=Effect)) +
geom_point(aes(shape=Effect, col=Effect)) +
scale_x_continuous(name = "n/Group") +
scale_y_continuous(name = "Statistical Power", limits=c(0,1),
breaks=c(seq(from=0, to=1, by=0.2))) +
theme_bw()+facet_wrap(~Effect, ncol=2)+
scale_fill_manual(values=cbPalette)+
scale_colour_manual(values=cbPalette)+
theme(axis.text=element_text(size=12, color="black"),
legend.text=element_text(size=12, color="black"),
legend.title=element_text(size=12, face="bold"),
axis.title=element_text(size=12, face="bold"),
plot.title=element_text(size=12, face="bold", hjust=0.5),
panel.grid.minor = element_blank(),
strip.text = element_text(size=12, face="bold"),
legend.position = "bottom")
ggsave(
filename="./power_sim_2.jpeg",
plot = last_plot(),
width = 6,
height = 8,
units = "in",
dpi = 150
)
